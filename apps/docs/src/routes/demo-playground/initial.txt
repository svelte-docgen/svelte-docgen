<script lang="ts" generics="K">
  interface A<T> { b: B<T>, v: T };
  interface B<T> { a: A };
  import { Snippet } from "svelte";
  type C = 1;
  type R = number | [string | R];
  let {}: {
    a: A<number>,
    c: C, u: 1 | "foo",
    s: Snippet<[A<number>]>,
    r: R,
    index: keyof K;
    indexedAccess: number[keyof K];
    conditional: K extends string ? true : false;
    stringMapping: Uppercase<K>; 
    templateLiteral: `Hello, ${K}!`;
  } = $props();
</script>